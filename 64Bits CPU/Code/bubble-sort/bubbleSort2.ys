   .pos 0 
   irmovq stack, %rsp   # Set up stack pointer  
   call main            # Execute main program
   halt                 # Stop program 



   # Array
      .align 8
   array:
      .quad 0x2
      .quad 0x4
      .quad 0x5
      .quad 0x6
      .quad 0x2
      .quad 0x1

   main:
      irmovq array, %rdi    # rdi = *arr
      irmovq $6, %rsi    # rsi = size = 5




      call bubble
      ret 
   
   # start bubble
   bubble:
      irmovq $1, %rax          # i = 1
      rrmovq %rsi, %r8         # size 
      

   i_loop:
      irmovq $0, %r9           # j = 0
      irmovq $0, %rcx          # 0 offset
   j_loop:
      rrmovq %rsi, %r8         # size
      irmovq $1, %r13          # constant 1
      subq %r13, %r8           # size - 1


      rrmovq %rdi, %r10        # temp2 = arr*
      addq %rcx, %r10          # temp2 = arr[0 + j]
      mrmovq (%r10), %r11      # temp3 = arr[j]
      mrmovq 8(%r10), %r12     # temp4 = arr[j + 1]
      subq %r12, %r11          # arr[j] - arr[j + 1]
      jle skip_swap              # if (arr[j] <= arr[j + 1]) DO NOT swap


   
      mrmovq (%r10), %r11      # temp3 = arr[j]
      mrmovq 8(%r10), %r12     # temp4 = arr[j + 1]
      rmmovq %r11, 8(%r10)     # arr[j + 1] = temp3
      rmmovq %r12, (%r10)      # arr[j] = temp4

   # go to next
    skip_swap:
      irmovq $8, %r13          # constant 8
      addq %r13, %rcx          # ++ j   / offest


      irmovq $1, %r13
      addq %r13, %r9          # ++ j    /  iterator
      rrmovq %r9, %r14
      subq %r8, %r14       # 
      jle j_loop           # if j < size - 1 loop
     

      rrmovq %rsi, %r8        # size
      irmovq $1, %r13
      addq %r13, %rax         # ++ i    /  iterator
      rrmovq %rax, %r14
      subq %r8, %r14            # size - i
      
      jle i_loop           # if i < size - 1  loop
      ret


      # # tesing 
      # mrmovq (%rdi), %rax
      # mrmovq 8(%rdi), %rsp
      # mrmovq 16(%rdi), %rsi
      # mrmovq 24(%rdi), %r10
      # mrmovq 32(%rdi), %r11
      # mrmovq 40(%rdi), %r12
      # ret


    # end bubble
    # The stack starts here and grows to lower addresses
        .pos 0x200      
    stack:
    