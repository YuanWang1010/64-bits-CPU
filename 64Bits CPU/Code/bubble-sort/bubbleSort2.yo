0x000:                      |    .pos 0 
0x000: 30f40002000000000000 |    irmovq stack, %rsp   # Set up stack pointer  
0x00a: 804800000000000000   |    call main            # Execute main program
0x013: 00                   |    halt                 # Stop program 
                            | 
                            | 
                            | 
                            |    # Array
0x018:                      |       .align 8
0x018:                      |    array:
0x018: 0200000000000000     |       .quad 0x2
0x020: 0400000000000000     |       .quad 0x4
0x028: 0500000000000000     |       .quad 0x5
0x030: 0600000000000000     |       .quad 0x6
0x038: 0200000000000000     |       .quad 0x2
0x040: 0100000000000000     |       .quad 0x1
                            | 
0x048:                      |    main:
0x048: 30f71800000000000000 |       irmovq array, %rdi    # rdi = *arr
0x052: 30f60600000000000000 |       irmovq $6, %rsi    # rsi = size = 5
                            | 
                            | 
                            | 
                            | 
0x05c: 806600000000000000   |       call bubble
0x065: 90                   |       ret 
                            |    
                            |    # start bubble
0x066:                      |    bubble:
0x066: 30f00100000000000000 |       irmovq $1, %rax          # i = 1
0x070: 2068                 |       rrmovq %rsi, %r8         # size 
                            |       
                            | 
0x072:                      |    i_loop:
0x072: 30f90000000000000000 |       irmovq $0, %r9           # j = 0
0x07c: 30f10000000000000000 |       irmovq $0, %rcx          # 0 offset
0x086:                      |    j_loop:
0x086: 2068                 |       rrmovq %rsi, %r8         # size
0x088: 30fd0100000000000000 |       irmovq $1, %r13          # constant 1
0x092: 61d8                 |       subq %r13, %r8           # size - 1
                            | 
                            | 
0x094: 207a                 |       rrmovq %rdi, %r10        # temp2 = arr*
0x096: 601a                 |       addq %rcx, %r10          # temp2 = arr[0 + j]
0x098: 50ba0000000000000000 |       mrmovq (%r10), %r11      # temp3 = arr[j]
0x0a2: 50ca0800000000000000 |       mrmovq 8(%r10), %r12     # temp4 = arr[j + 1]
0x0ac: 61cb                 |       subq %r12, %r11          # arr[j] - arr[j + 1]
0x0ae: 71df00000000000000   |       jle skip_swap              # if (arr[j] <= arr[j + 1]) DO NOT swap
                            | 
                            | 
                            |    
0x0b7: 50ba0000000000000000 |       mrmovq (%r10), %r11      # temp3 = arr[j]
0x0c1: 50ca0800000000000000 |       mrmovq 8(%r10), %r12     # temp4 = arr[j + 1]
0x0cb: 40ba0800000000000000 |       rmmovq %r11, 8(%r10)     # arr[j + 1] = temp3
0x0d5: 40ca0000000000000000 |       rmmovq %r12, (%r10)      # arr[j] = temp4
                            | 
                            |    # go to next
0x0df:                      |     skip_swap:
0x0df: 30fd0800000000000000 |       irmovq $8, %r13          # constant 8
0x0e9: 60d1                 |       addq %r13, %rcx          # ++ j   / offest
                            | 
                            | 
0x0eb: 30fd0100000000000000 |       irmovq $1, %r13
0x0f5: 60d9                 |       addq %r13, %r9          # ++ j    /  iterator
0x0f7: 209e                 |       rrmovq %r9, %r14
0x0f9: 618e                 |       subq %r8, %r14       # 
0x0fb: 718600000000000000   |       jle j_loop           # if j < size - 1 loop
                            |      
                            | 
0x104: 2068                 |       rrmovq %rsi, %r8        # size
0x106: 30fd0100000000000000 |       irmovq $1, %r13
0x110: 60d0                 |       addq %r13, %rax         # ++ i    /  iterator
0x112: 200e                 |       rrmovq %rax, %r14
0x114: 618e                 |       subq %r8, %r14            # size - i
                            |       
0x116: 717200000000000000   |       jle i_loop           # if i < size - 1  loop
0x11f: 90                   |       ret
                            | 
                            | 
                            |       # # tesing 
                            |       # mrmovq (%rdi), %rax
                            |       # mrmovq 8(%rdi), %rsp
                            |       # mrmovq 16(%rdi), %rsi
                            |       # mrmovq 24(%rdi), %r10
                            |       # mrmovq 32(%rdi), %r11
                            |       # mrmovq 40(%rdi), %r12
                            |       # ret
                            | 
                            | 
                            |     # end bubble
                            |     # The stack starts here and grows to lower addresses
0x200:                      |         .pos 0x200      
0x200:                      |     stack:
